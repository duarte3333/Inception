services:
  mariadb:
    container_name: mariadb
    #image: mariadb:10.4 #the image is prep of the container but here i am create one
    build:
      context: . #the context is the path of the dockerfile 
      dockerfile: ./requirements/mariadb/Dockerfile #my image file
    env_file: #injecting things to the env of the container by a file
      - .env      
    volumes: 
      - db_data:/var/run/mysql #connection between host computer (VM) and container
    ports: #definition of ports to open
      - "3306" # "3306:3306" is to redirect the port of the container to the port of the host computer
    networks:
      - my_network #the network exists in order to connect the containers
  
  wordpress:
    container_name: wordpress
    #image: wordpress:5.4.1 #the image is prep of the container but here i am create one
    build:
      context: . #the context is the path of the dockerfile 
      dockerfile: ./requirements/wordpress/Dockerfile #my image file
    env_file: #injecting things to the env of the container by a file
      - .env
    volumes: #connection between host computer (VM) and container
      - wp_data:/var/www/html
    ports: #definition of ports to open
      - "9000"
    networks:
      - my_network #the network exists in order to connect the containers
    depends_on: #only starts if the container mariadb is running
    #the order of the containers to start
      - mariadb
    restart: always #if the container stops, it will start again
  
  nginx_tsl: #container name
    container_name: nginx
    build: #create image file
      context: ./requirements/nginx #path of the dockerfile
    volumes: #connection between host computer (VM) and container
      - ./requirements/nginx/conf/nginx.conf:/etc/nginx/nginx.conf
      - wp_data:/var/www/html
    ports: #definition of ports to open
      - "443:443" #only if many containers are acessing to same door 
    depends_on:
      - wordpress #only starts if the container wordpress is running
    networks:
      - my_network #the network exists in order to connect the containers

#how to configure the volumes of the containers
volumes:
  #volume to store data_base
  wp_data:
    #set to local to stored the volume on the host machine
    driver: local 
    #to specify the type of volume and device to use
    driver_opts: 
      type: none
      o: bind
      #home/login/data
      device: /home/duarte33/data/wp_data 
  db_data:
    driver: local
    driver_opts: 
      type: none
      o: bind 
      #path where the database is stored on the host machine
      device: /home/duarte33/data/db_data 



networks:
  my_network: #network name
    driver: bridge #type of network to comunicate with containers only
    #nginx is the only one that is going to comunicate with the outside world